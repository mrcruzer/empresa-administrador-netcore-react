// <auto-generated />
using System;
using EmpresaAdministrador.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmpresaAdministrador.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(EmpresaContext))]
    [Migration("20220912190139_first-migration")]
    partial class firstmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Country")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int?>("EmploymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("PayGradeId")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<long>("Telephone")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentStatusId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PayGradeId");

                    b.HasIndex("SkillId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.EmploymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("EmploymentStatus");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.PayGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("PayGrades");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.Employee", b =>
                {
                    b.HasOne("EmpresaAdministrador.Core.Domain.Entities.EmploymentStatus", null)
                        .WithMany("Employees")
                        .HasForeignKey("EmploymentStatusId");

                    b.HasOne("EmpresaAdministrador.Core.Domain.Entities.JobCategory", "JobCategory")
                        .WithMany("Employees")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmpresaAdministrador.Core.Domain.Entities.JobTitle", "JobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmpresaAdministrador.Core.Domain.Entities.Language", null)
                        .WithMany("Employees")
                        .HasForeignKey("LanguageId");

                    b.HasOne("EmpresaAdministrador.Core.Domain.Entities.License", null)
                        .WithMany("Employees")
                        .HasForeignKey("LicenseId");

                    b.HasOne("EmpresaAdministrador.Core.Domain.Entities.Nationality", "Nationality")
                        .WithMany("Employees")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmpresaAdministrador.Core.Domain.Entities.PayGrade", null)
                        .WithMany("Employees")
                        .HasForeignKey("PayGradeId");

                    b.HasOne("EmpresaAdministrador.Core.Domain.Entities.Skill", null)
                        .WithMany("Employees")
                        .HasForeignKey("SkillId");

                    b.Navigation("JobCategory");

                    b.Navigation("JobTitle");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.EmploymentStatus", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.JobCategory", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.JobTitle", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.Language", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.License", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.Nationality", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.PayGrade", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmpresaAdministrador.Core.Domain.Entities.Skill", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
